//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class InspectionTemplatesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:7000";
    }

    storeDocument(command: StoreDocumentCommandOfInspectionTemplate): Promise<StoreDocumentResponseOfInspectionTemplate> {
        let url_ = this.baseUrl + "/api/InspectionTemplates/v1/StoreDocument";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStoreDocument(_response);
        });
    }

    protected processStoreDocument(response: Response): Promise<StoreDocumentResponseOfInspectionTemplate> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoreDocumentResponseOfInspectionTemplate.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StoreDocumentResponseOfInspectionTemplate>(null as any);
    }

    getInspectionTemplates(query: GetInspectionTemplatesQuery): Promise<GetDocumentsResponseOfInspectionTemplate> {
        let url_ = this.baseUrl + "/api/InspectionTemplates/v1/GetInspectionTemplates";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInspectionTemplates(_response);
        });
    }

    protected processGetInspectionTemplates(response: Response): Promise<GetDocumentsResponseOfInspectionTemplate> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentsResponseOfInspectionTemplate.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentsResponseOfInspectionTemplate>(null as any);
    }

    getMediaGroups(query: GetDocumentQuery): Promise<GetMediaGroupsResponse> {
        let url_ = this.baseUrl + "/api/InspectionTemplates/v1/GetMediaGroups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMediaGroups(_response);
        });
    }

    protected processGetMediaGroups(response: Response): Promise<GetMediaGroupsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetMediaGroupsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetMediaGroupsResponse>(null as any);
    }

    getInspectionTemplate(query: GetDocumentQuery): Promise<GetDocumentResponseOfInspectionTemplate> {
        let url_ = this.baseUrl + "/api/InspectionTemplates/v1/GetInspectionTemplate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInspectionTemplate(_response);
        });
    }

    protected processGetInspectionTemplate(response: Response): Promise<GetDocumentResponseOfInspectionTemplate> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentResponseOfInspectionTemplate.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentResponseOfInspectionTemplate>(null as any);
    }

    deleteInspectionTemplate(command: DeleteDocumentCommand): Promise<AppResponse> {
        let url_ = this.baseUrl + "/api/InspectionTemplates/v1/DeleteInspectionTemplate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteInspectionTemplate(_response);
        });
    }

    protected processDeleteInspectionTemplate(response: Response): Promise<AppResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AppResponse>(null as any);
    }

    deleteInspectionTemplateStep(command: DeleteDocumentCommand): Promise<AppResponse> {
        let url_ = this.baseUrl + "/api/InspectionTemplates/v1/DeleteInspectionTemplateStep";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteInspectionTemplateStep(_response);
        });
    }

    protected processDeleteInspectionTemplateStep(response: Response): Promise<AppResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AppResponse>(null as any);
    }

    deleteInspectionTemplateMedia(command: DeleteMediaItemCommand): Promise<AppResponse> {
        let url_ = this.baseUrl + "/api/InspectionTemplates/v1/DeleteInspectionTemplateMedia";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteInspectionTemplateMedia(_response);
        });
    }

    protected processDeleteInspectionTemplateMedia(response: Response): Promise<AppResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AppResponse>(null as any);
    }
}

export class MediaFilesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:7000";
    }

    storeDocument(command: StoreDocumentCommandOfMediaFile): Promise<StoreDocumentResponseOfMediaFile> {
        let url_ = this.baseUrl + "/api/MediaFiles/v1/StoreDocument";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStoreDocument(_response);
        });
    }

    protected processStoreDocument(response: Response): Promise<StoreDocumentResponseOfMediaFile> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoreDocumentResponseOfMediaFile.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StoreDocumentResponseOfMediaFile>(null as any);
    }

    deleteDocument(command: DeleteDocumentCommand): Promise<AppResponse> {
        let url_ = this.baseUrl + "/api/MediaFiles/v1/DeleteDocument";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteDocument(_response);
        });
    }

    protected processDeleteDocument(response: Response): Promise<AppResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AppResponse>(null as any);
    }

    getPagedList(query: GetMediaFilesQuery): Promise<GetDocumentsResponseOfMediaFile> {
        let url_ = this.baseUrl + "/api/MediaFiles/v1/GetPagedList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPagedList(_response);
        });
    }

    protected processGetPagedList(response: Response): Promise<GetDocumentsResponseOfMediaFile> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentsResponseOfMediaFile.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentsResponseOfMediaFile>(null as any);
    }

    getMediaFile(query: GetMediaFileQuery): Promise<GetDocumentResponseOfMediaFile> {
        let url_ = this.baseUrl + "/api/MediaFiles/v1/GetMediaFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMediaFile(_response);
        });
    }

    protected processGetMediaFile(response: Response): Promise<GetDocumentResponseOfMediaFile> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentResponseOfMediaFile.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentResponseOfMediaFile>(null as any);
    }

    downloadFile(fileName: string | null): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/MediaFiles/v1/File/{fileName}";
        if (fileName === undefined || fileName === null)
            throw new Error("The parameter 'fileName' must be defined.");
        url_ = url_.replace("{fileName}", encodeURIComponent("" + fileName));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDownloadFile(_response);
        });
    }

    protected processDownloadFile(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }

    streamFile(fileName: string | null): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/MediaFiles/v1/StreamFile/{fileName}";
        if (fileName === undefined || fileName === null)
            throw new Error("The parameter 'fileName' must be defined.");
        url_ = url_.replace("{fileName}", encodeURIComponent("" + fileName));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStreamFile(_response);
        });
    }

    protected processStreamFile(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }

    getMediaGroupForEntity(query: GetMediaGroupForEntityQuery): Promise<GetMediaGroupForEntityResponse> {
        let url_ = this.baseUrl + "/api/MediaFiles/v1/GetMediaGroupForEntity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMediaGroupForEntity(_response);
        });
    }

    protected processGetMediaGroupForEntity(response: Response): Promise<GetMediaGroupForEntityResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetMediaGroupForEntityResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetMediaGroupForEntityResponse>(null as any);
    }
}

export class TimeSheetsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:7000";
    }

    storeDocument(command: StoreDocumentCommandOfTimeSheet): Promise<StoreDocumentResponseOfTimeSheet> {
        let url_ = this.baseUrl + "/api/TimeSheets/v1/Store";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStoreDocument(_response);
        });
    }

    protected processStoreDocument(response: Response): Promise<StoreDocumentResponseOfTimeSheet> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoreDocumentResponseOfTimeSheet.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StoreDocumentResponseOfTimeSheet>(null as any);
    }

    get(query: GetDocumentsQuery): Promise<GetDocumentsResponseOfTimeSheet> {
        let url_ = this.baseUrl + "/api/TimeSheets/v1/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<GetDocumentsResponseOfTimeSheet> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentsResponseOfTimeSheet.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentsResponseOfTimeSheet>(null as any);
    }

    getInspectionTemplate(query: GetDocumentQuery): Promise<GetDocumentResponseOfTimeSheet> {
        let url_ = this.baseUrl + "/api/TimeSheets/v1/Get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInspectionTemplate(_response);
        });
    }

    protected processGetInspectionTemplate(response: Response): Promise<GetDocumentResponseOfTimeSheet> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentResponseOfTimeSheet.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentResponseOfTimeSheet>(null as any);
    }

    deleteInspectionTemplate(command: DeleteDocumentCommand): Promise<AppResponse> {
        let url_ = this.baseUrl + "/api/TimeSheets/v1/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteInspectionTemplate(_response);
        });
    }

    protected processDeleteInspectionTemplate(response: Response): Promise<AppResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AppResponse>(null as any);
    }
}

export class AppResponse implements IAppResponse {
    code!: ResponseCode;
    message?: string | undefined;
    validationErrors?: ValidationFailure[] | undefined;
    additionalData?: any | undefined;

    constructor(data?: IAppResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors!.push(ValidationFailure.fromJS(item));
            }
            this.additionalData = _data["additionalData"];
        }
    }

    static fromJS(data: any): AppResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AppResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        data["additionalData"] = this.additionalData;
        return data;
    }
}

export interface IAppResponse {
    code: ResponseCode;
    message?: string | undefined;
    validationErrors?: ValidationFailure[] | undefined;
    additionalData?: any | undefined;
}

export class StoreDocumentResponseOfInspectionTemplate extends AppResponse implements IStoreDocumentResponseOfInspectionTemplate {
    document?: InspectionTemplate | undefined;

    constructor(data?: IStoreDocumentResponseOfInspectionTemplate) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? InspectionTemplate.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): StoreDocumentResponseOfInspectionTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDocumentResponseOfInspectionTemplate();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStoreDocumentResponseOfInspectionTemplate extends IAppResponse {
    document?: InspectionTemplate | undefined;
}

export abstract class BaseEntity implements IBaseEntity {
    id?: string | undefined;
    createdAt!: Date;
    createdBy?: string | undefined;
    deletedAt?: Date | undefined;
    deletedBy?: string | undefined;
    isDeleted!: boolean;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;

    constructor(data?: IBaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.deletedAt = _data["deletedAt"] ? new Date(_data["deletedAt"].toString()) : <any>undefined;
            this.deletedBy = _data["deletedBy"];
            this.isDeleted = _data["isDeleted"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
        }
    }

    static fromJS(data: any): BaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["deletedAt"] = this.deletedAt ? this.deletedAt.toISOString() : <any>undefined;
        data["deletedBy"] = this.deletedBy;
        data["isDeleted"] = this.isDeleted;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        return data;
    }
}

export interface IBaseEntity {
    id?: string | undefined;
    createdAt: Date;
    createdBy?: string | undefined;
    deletedAt?: Date | undefined;
    deletedBy?: string | undefined;
    isDeleted: boolean;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;
}

export class InspectionTemplate extends BaseEntity implements IInspectionTemplate {
    name?: string | undefined;
    description?: string | undefined;
    assetId?: string | undefined;
    inspectionTemplateStatus!: InspectionTemplateStatus;
    templateSteps?: InspectionTemplateStep[] | undefined;
    organizationId!: number;

    constructor(data?: IInspectionTemplate) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.assetId = _data["assetId"];
            this.inspectionTemplateStatus = _data["inspectionTemplateStatus"];
            if (Array.isArray(_data["templateSteps"])) {
                this.templateSteps = [] as any;
                for (let item of _data["templateSteps"])
                    this.templateSteps!.push(InspectionTemplateStep.fromJS(item));
            }
            this.organizationId = _data["organizationId"];
        }
    }

    static override fromJS(data: any): InspectionTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionTemplate();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["assetId"] = this.assetId;
        data["inspectionTemplateStatus"] = this.inspectionTemplateStatus;
        if (Array.isArray(this.templateSteps)) {
            data["templateSteps"] = [];
            for (let item of this.templateSteps)
                data["templateSteps"].push(item.toJSON());
        }
        data["organizationId"] = this.organizationId;
        super.toJSON(data);
        return data;
    }
}

export interface IInspectionTemplate extends IBaseEntity {
    name?: string | undefined;
    description?: string | undefined;
    assetId?: string | undefined;
    inspectionTemplateStatus: InspectionTemplateStatus;
    templateSteps?: InspectionTemplateStep[] | undefined;
    organizationId: number;
}

export enum InspectionTemplateStatus {
    Unpublished = 1,
    Published = 20,
}

export class InspectionTemplateStep extends BaseEntity implements IInspectionTemplateStep {
    inspectionTemplateId?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;

    constructor(data?: IInspectionTemplateStep) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.inspectionTemplateId = _data["inspectionTemplateId"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static override fromJS(data: any): InspectionTemplateStep {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionTemplateStep();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inspectionTemplateId"] = this.inspectionTemplateId;
        data["name"] = this.name;
        data["description"] = this.description;
        super.toJSON(data);
        return data;
    }
}

export interface IInspectionTemplateStep extends IBaseEntity {
    inspectionTemplateId?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
}

export enum ResponseCode {
    Success = 200,
    BadRequest = 400,
    NotFound = 404,
    Error = 405,
}

export class ValidationFailure implements IValidationFailure {
    propertyName?: string | undefined;
    errorMessage?: string | undefined;
    attemptedValue?: any | undefined;
    customState?: any | undefined;
    severity!: Severity;
    errorCode?: string | undefined;
    formattedMessagePlaceholderValues?: { [key: string]: any; } | undefined;

    constructor(data?: IValidationFailure) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propertyName = _data["propertyName"];
            this.errorMessage = _data["errorMessage"];
            this.attemptedValue = _data["attemptedValue"];
            this.customState = _data["customState"];
            this.severity = _data["severity"];
            this.errorCode = _data["errorCode"];
            if (_data["formattedMessagePlaceholderValues"]) {
                this.formattedMessagePlaceholderValues = {} as any;
                for (let key in _data["formattedMessagePlaceholderValues"]) {
                    if (_data["formattedMessagePlaceholderValues"].hasOwnProperty(key))
                        (<any>this.formattedMessagePlaceholderValues)![key] = _data["formattedMessagePlaceholderValues"][key];
                }
            }
        }
    }

    static fromJS(data: any): ValidationFailure {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationFailure();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyName"] = this.propertyName;
        data["errorMessage"] = this.errorMessage;
        data["attemptedValue"] = this.attemptedValue;
        data["customState"] = this.customState;
        data["severity"] = this.severity;
        data["errorCode"] = this.errorCode;
        if (this.formattedMessagePlaceholderValues) {
            data["formattedMessagePlaceholderValues"] = {};
            for (let key in this.formattedMessagePlaceholderValues) {
                if (this.formattedMessagePlaceholderValues.hasOwnProperty(key))
                    (<any>data["formattedMessagePlaceholderValues"])[key] = (<any>this.formattedMessagePlaceholderValues)[key];
            }
        }
        return data;
    }
}

export interface IValidationFailure {
    propertyName?: string | undefined;
    errorMessage?: string | undefined;
    attemptedValue?: any | undefined;
    customState?: any | undefined;
    severity: Severity;
    errorCode?: string | undefined;
    formattedMessagePlaceholderValues?: { [key: string]: any; } | undefined;
}

export enum Severity {
    Error = 0,
    Warning = 1,
    Info = 2,
}

export class Request implements IRequest {
    userId?: string | undefined;

    constructor(data?: IRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): Request {
        data = typeof data === 'object' ? data : {};
        let result = new Request();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        return data;
    }
}

export interface IRequest {
    userId?: string | undefined;
}

export class StoreDocumentCommandOfInspectionTemplate extends Request implements IStoreDocumentCommandOfInspectionTemplate {
    document?: InspectionTemplate | undefined;

    constructor(data?: IStoreDocumentCommandOfInspectionTemplate) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? InspectionTemplate.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): StoreDocumentCommandOfInspectionTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDocumentCommandOfInspectionTemplate();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStoreDocumentCommandOfInspectionTemplate extends IRequest {
    document?: InspectionTemplate | undefined;
}

export class GetDocumentsResponseOfInspectionTemplate extends AppResponse implements IGetDocumentsResponseOfInspectionTemplate {
    documents?: InspectionTemplate[] | undefined;
    totalItemCount!: number;
    pageCount!: number;
    isFirstPage!: boolean;
    isLastPage!: boolean;
    hasNextPage!: boolean;
    hasPreviousPage!: boolean;
    firstItemOnPage!: number;
    lastItemOnPage!: number;

    constructor(data?: IGetDocumentsResponseOfInspectionTemplate) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(InspectionTemplate.fromJS(item));
            }
            this.totalItemCount = _data["totalItemCount"];
            this.pageCount = _data["pageCount"];
            this.isFirstPage = _data["isFirstPage"];
            this.isLastPage = _data["isLastPage"];
            this.hasNextPage = _data["hasNextPage"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.firstItemOnPage = _data["firstItemOnPage"];
            this.lastItemOnPage = _data["lastItemOnPage"];
        }
    }

    static override fromJS(data: any): GetDocumentsResponseOfInspectionTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentsResponseOfInspectionTemplate();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        data["totalItemCount"] = this.totalItemCount;
        data["pageCount"] = this.pageCount;
        data["isFirstPage"] = this.isFirstPage;
        data["isLastPage"] = this.isLastPage;
        data["hasNextPage"] = this.hasNextPage;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["firstItemOnPage"] = this.firstItemOnPage;
        data["lastItemOnPage"] = this.lastItemOnPage;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentsResponseOfInspectionTemplate extends IAppResponse {
    documents?: InspectionTemplate[] | undefined;
    totalItemCount: number;
    pageCount: number;
    isFirstPage: boolean;
    isLastPage: boolean;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    firstItemOnPage: number;
    lastItemOnPage: number;
}

export class GetDocumentsQuery extends Request implements IGetDocumentsQuery {
    first!: number;
    rows!: number;
    page!: number;
    sortField?: string | undefined;
    sortOrder?: number | undefined;

    constructor(data?: IGetDocumentsQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.first = _data["first"];
            this.rows = _data["rows"];
            this.page = _data["page"];
            this.sortField = _data["sortField"];
            this.sortOrder = _data["sortOrder"];
        }
    }

    static override fromJS(data: any): GetDocumentsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentsQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["first"] = this.first;
        data["rows"] = this.rows;
        data["page"] = this.page;
        data["sortField"] = this.sortField;
        data["sortOrder"] = this.sortOrder;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentsQuery extends IRequest {
    first: number;
    rows: number;
    page: number;
    sortField?: string | undefined;
    sortOrder?: number | undefined;
}

export class GetInspectionTemplatesQuery extends GetDocumentsQuery implements IGetInspectionTemplatesQuery {
    searchTerm?: string | undefined;

    constructor(data?: IGetInspectionTemplatesQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.searchTerm = _data["searchTerm"];
        }
    }

    static override fromJS(data: any): GetInspectionTemplatesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetInspectionTemplatesQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchTerm"] = this.searchTerm;
        super.toJSON(data);
        return data;
    }
}

export interface IGetInspectionTemplatesQuery extends IGetDocumentsQuery {
    searchTerm?: string | undefined;
}

export class GetMediaGroupsResponse extends AppResponse implements IGetMediaGroupsResponse {
    mediaGroups?: MediaGroupDto[] | undefined;

    constructor(data?: IGetMediaGroupsResponse) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["mediaGroups"])) {
                this.mediaGroups = [] as any;
                for (let item of _data["mediaGroups"])
                    this.mediaGroups!.push(MediaGroupDto.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): GetMediaGroupsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetMediaGroupsResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.mediaGroups)) {
            data["mediaGroups"] = [];
            for (let item of this.mediaGroups)
                data["mediaGroups"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGetMediaGroupsResponse extends IAppResponse {
    mediaGroups?: MediaGroupDto[] | undefined;
}

export class MediaGroupDto implements IMediaGroupDto {
    id?: string | undefined;
    items?: MediaGroupItemDto[] | undefined;
    name?: string | undefined;
    parentId?: string | undefined;
    parentObjectType?: string | undefined;

    constructor(data?: IMediaGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MediaGroupItemDto.fromJS(item));
            }
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.parentObjectType = _data["parentObjectType"];
        }
    }

    static fromJS(data: any): MediaGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new MediaGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["parentObjectType"] = this.parentObjectType;
        return data;
    }
}

export interface IMediaGroupDto {
    id?: string | undefined;
    items?: MediaGroupItemDto[] | undefined;
    name?: string | undefined;
    parentId?: string | undefined;
    parentObjectType?: string | undefined;
}

export class MediaGroupItemDto implements IMediaGroupItemDto {
    attachmentType?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    link?: string | undefined;
    thumbNailLink?: string | undefined;

    constructor(data?: IMediaGroupItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.attachmentType = _data["attachmentType"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.link = _data["link"];
            this.thumbNailLink = _data["thumbNailLink"];
        }
    }

    static fromJS(data: any): MediaGroupItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new MediaGroupItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attachmentType"] = this.attachmentType;
        data["id"] = this.id;
        data["name"] = this.name;
        data["link"] = this.link;
        data["thumbNailLink"] = this.thumbNailLink;
        return data;
    }
}

export interface IMediaGroupItemDto {
    attachmentType?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    link?: string | undefined;
    thumbNailLink?: string | undefined;
}

export class GetDocumentQuery extends Request implements IGetDocumentQuery {
    id?: string | undefined;

    constructor(data?: IGetDocumentQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static override fromJS(data: any): GetDocumentQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentQuery extends IRequest {
    id?: string | undefined;
}

export class GetDocumentResponseOfInspectionTemplate extends AppResponse implements IGetDocumentResponseOfInspectionTemplate {
    document?: InspectionTemplate | undefined;

    constructor(data?: IGetDocumentResponseOfInspectionTemplate) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? InspectionTemplate.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): GetDocumentResponseOfInspectionTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentResponseOfInspectionTemplate();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentResponseOfInspectionTemplate extends IAppResponse {
    document?: InspectionTemplate | undefined;
}

export class DeleteDocumentCommand extends Request implements IDeleteDocumentCommand {
    id?: string | undefined;

    constructor(data?: IDeleteDocumentCommand) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static override fromJS(data: any): DeleteDocumentCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteDocumentCommand();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data;
    }
}

export interface IDeleteDocumentCommand extends IRequest {
    id?: string | undefined;
}

export class DeleteMediaItemCommand extends Request implements IDeleteMediaItemCommand {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: IDeleteMediaItemCommand) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static override fromJS(data: any): DeleteMediaItemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteMediaItemCommand();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        super.toJSON(data);
        return data;
    }
}

export interface IDeleteMediaItemCommand extends IRequest {
    id?: string | undefined;
    name?: string | undefined;
}

export class StoreDocumentResponseOfMediaFile extends AppResponse implements IStoreDocumentResponseOfMediaFile {
    document?: MediaFile | undefined;

    constructor(data?: IStoreDocumentResponseOfMediaFile) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? MediaFile.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): StoreDocumentResponseOfMediaFile {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDocumentResponseOfMediaFile();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStoreDocumentResponseOfMediaFile extends IAppResponse {
    document?: MediaFile | undefined;
}

export class MediaFile extends BaseEntity implements IMediaFile {
    fileSize!: number;
    width!: number;
    height!: number;
    altText?: string | undefined;
    description?: string | undefined;
    fileName?: string | undefined;
    tags?: string | undefined;
    fileType?: string | undefined;
    title?: string | undefined;
    parentEntity?: string | undefined;
    parentEntityId?: string | undefined;
    blobLink?: string | undefined;

    constructor(data?: IMediaFile) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fileSize = _data["fileSize"];
            this.width = _data["width"];
            this.height = _data["height"];
            this.altText = _data["altText"];
            this.description = _data["description"];
            this.fileName = _data["fileName"];
            this.tags = _data["tags"];
            this.fileType = _data["fileType"];
            this.title = _data["title"];
            this.parentEntity = _data["parentEntity"];
            this.parentEntityId = _data["parentEntityId"];
            this.blobLink = _data["blobLink"];
        }
    }

    static override fromJS(data: any): MediaFile {
        data = typeof data === 'object' ? data : {};
        let result = new MediaFile();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileSize"] = this.fileSize;
        data["width"] = this.width;
        data["height"] = this.height;
        data["altText"] = this.altText;
        data["description"] = this.description;
        data["fileName"] = this.fileName;
        data["tags"] = this.tags;
        data["fileType"] = this.fileType;
        data["title"] = this.title;
        data["parentEntity"] = this.parentEntity;
        data["parentEntityId"] = this.parentEntityId;
        data["blobLink"] = this.blobLink;
        super.toJSON(data);
        return data;
    }
}

export interface IMediaFile extends IBaseEntity {
    fileSize: number;
    width: number;
    height: number;
    altText?: string | undefined;
    description?: string | undefined;
    fileName?: string | undefined;
    tags?: string | undefined;
    fileType?: string | undefined;
    title?: string | undefined;
    parentEntity?: string | undefined;
    parentEntityId?: string | undefined;
    blobLink?: string | undefined;
}

export class StoreDocumentCommandOfMediaFile extends Request implements IStoreDocumentCommandOfMediaFile {
    document?: MediaFile | undefined;

    constructor(data?: IStoreDocumentCommandOfMediaFile) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? MediaFile.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): StoreDocumentCommandOfMediaFile {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDocumentCommandOfMediaFile();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStoreDocumentCommandOfMediaFile extends IRequest {
    document?: MediaFile | undefined;
}

export class GetDocumentsResponseOfMediaFile extends AppResponse implements IGetDocumentsResponseOfMediaFile {
    documents?: MediaFile[] | undefined;
    totalItemCount!: number;
    pageCount!: number;
    isFirstPage!: boolean;
    isLastPage!: boolean;
    hasNextPage!: boolean;
    hasPreviousPage!: boolean;
    firstItemOnPage!: number;
    lastItemOnPage!: number;

    constructor(data?: IGetDocumentsResponseOfMediaFile) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(MediaFile.fromJS(item));
            }
            this.totalItemCount = _data["totalItemCount"];
            this.pageCount = _data["pageCount"];
            this.isFirstPage = _data["isFirstPage"];
            this.isLastPage = _data["isLastPage"];
            this.hasNextPage = _data["hasNextPage"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.firstItemOnPage = _data["firstItemOnPage"];
            this.lastItemOnPage = _data["lastItemOnPage"];
        }
    }

    static override fromJS(data: any): GetDocumentsResponseOfMediaFile {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentsResponseOfMediaFile();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        data["totalItemCount"] = this.totalItemCount;
        data["pageCount"] = this.pageCount;
        data["isFirstPage"] = this.isFirstPage;
        data["isLastPage"] = this.isLastPage;
        data["hasNextPage"] = this.hasNextPage;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["firstItemOnPage"] = this.firstItemOnPage;
        data["lastItemOnPage"] = this.lastItemOnPage;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentsResponseOfMediaFile extends IAppResponse {
    documents?: MediaFile[] | undefined;
    totalItemCount: number;
    pageCount: number;
    isFirstPage: boolean;
    isLastPage: boolean;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    firstItemOnPage: number;
    lastItemOnPage: number;
}

export class GetMediaFilesQuery extends Request implements IGetMediaFilesQuery {
    fileName?: string | undefined;
    fileType?: string | undefined;
    page!: number;
    rows!: number;

    constructor(data?: IGetMediaFilesQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fileName = _data["fileName"];
            this.fileType = _data["fileType"];
            this.page = _data["page"];
            this.rows = _data["rows"];
        }
    }

    static override fromJS(data: any): GetMediaFilesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetMediaFilesQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileType"] = this.fileType;
        data["page"] = this.page;
        data["rows"] = this.rows;
        super.toJSON(data);
        return data;
    }
}

export interface IGetMediaFilesQuery extends IRequest {
    fileName?: string | undefined;
    fileType?: string | undefined;
    page: number;
    rows: number;
}

export class GetDocumentResponseOfMediaFile extends AppResponse implements IGetDocumentResponseOfMediaFile {
    document?: MediaFile | undefined;

    constructor(data?: IGetDocumentResponseOfMediaFile) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? MediaFile.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): GetDocumentResponseOfMediaFile {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentResponseOfMediaFile();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentResponseOfMediaFile extends IAppResponse {
    document?: MediaFile | undefined;
}

export class GetMediaFileQuery extends Request implements IGetMediaFileQuery {
    fileName?: string | undefined;
    id?: string | undefined;

    constructor(data?: IGetMediaFileQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fileName = _data["fileName"];
            this.id = _data["id"];
        }
    }

    static override fromJS(data: any): GetMediaFileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetMediaFileQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["id"] = this.id;
        super.toJSON(data);
        return data;
    }
}

export interface IGetMediaFileQuery extends IRequest {
    fileName?: string | undefined;
    id?: string | undefined;
}

export class GetMediaGroupForEntityResponse extends AppResponse implements IGetMediaGroupForEntityResponse {
    mediaGroup?: MediaGroupDto | undefined;

    constructor(data?: IGetMediaGroupForEntityResponse) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.mediaGroup = _data["mediaGroup"] ? MediaGroupDto.fromJS(_data["mediaGroup"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): GetMediaGroupForEntityResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetMediaGroupForEntityResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mediaGroup"] = this.mediaGroup ? this.mediaGroup.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IGetMediaGroupForEntityResponse extends IAppResponse {
    mediaGroup?: MediaGroupDto | undefined;
}

export class GetMediaGroupForEntityQuery extends Request implements IGetMediaGroupForEntityQuery {
    parentEntity?: string | undefined;
    parentEntityId?: string | undefined;

    constructor(data?: IGetMediaGroupForEntityQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.parentEntity = _data["parentEntity"];
            this.parentEntityId = _data["parentEntityId"];
        }
    }

    static override fromJS(data: any): GetMediaGroupForEntityQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetMediaGroupForEntityQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentEntity"] = this.parentEntity;
        data["parentEntityId"] = this.parentEntityId;
        super.toJSON(data);
        return data;
    }
}

export interface IGetMediaGroupForEntityQuery extends IRequest {
    parentEntity?: string | undefined;
    parentEntityId?: string | undefined;
}

export class StoreDocumentResponseOfTimeSheet extends AppResponse implements IStoreDocumentResponseOfTimeSheet {
    document?: TimeSheet | undefined;

    constructor(data?: IStoreDocumentResponseOfTimeSheet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? TimeSheet.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): StoreDocumentResponseOfTimeSheet {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDocumentResponseOfTimeSheet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStoreDocumentResponseOfTimeSheet extends IAppResponse {
    document?: TimeSheet | undefined;
}

export class TimeSheet extends BaseEntity implements ITimeSheet {
    entries?: TimeEntry[] | undefined;
    notes?: string | undefined;
    weekEnding?: string | undefined;

    constructor(data?: ITimeSheet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["entries"])) {
                this.entries = [] as any;
                for (let item of _data["entries"])
                    this.entries!.push(TimeEntry.fromJS(item));
            }
            this.notes = _data["notes"];
            this.weekEnding = _data["weekEnding"];
        }
    }

    static override fromJS(data: any): TimeSheet {
        data = typeof data === 'object' ? data : {};
        let result = new TimeSheet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.entries)) {
            data["entries"] = [];
            for (let item of this.entries)
                data["entries"].push(item.toJSON());
        }
        data["notes"] = this.notes;
        data["weekEnding"] = this.weekEnding;
        super.toJSON(data);
        return data;
    }
}

export interface ITimeSheet extends IBaseEntity {
    entries?: TimeEntry[] | undefined;
    notes?: string | undefined;
    weekEnding?: string | undefined;
}

export class TimeEntry extends BaseEntity implements ITimeEntry {
    date?: string | undefined;
    endTime?: string | undefined;
    hours!: number;
    notes?: string | undefined;
    projectId?: string | undefined;
    startTime?: string | undefined;
    storyId?: string | undefined;

    constructor(data?: ITimeEntry) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.date = _data["date"];
            this.endTime = _data["endTime"];
            this.hours = _data["hours"];
            this.notes = _data["notes"];
            this.projectId = _data["projectId"];
            this.startTime = _data["startTime"];
            this.storyId = _data["storyId"];
        }
    }

    static override fromJS(data: any): TimeEntry {
        data = typeof data === 'object' ? data : {};
        let result = new TimeEntry();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["endTime"] = this.endTime;
        data["hours"] = this.hours;
        data["notes"] = this.notes;
        data["projectId"] = this.projectId;
        data["startTime"] = this.startTime;
        data["storyId"] = this.storyId;
        super.toJSON(data);
        return data;
    }
}

export interface ITimeEntry extends IBaseEntity {
    date?: string | undefined;
    endTime?: string | undefined;
    hours: number;
    notes?: string | undefined;
    projectId?: string | undefined;
    startTime?: string | undefined;
    storyId?: string | undefined;
}

export class StoreDocumentCommandOfTimeSheet extends Request implements IStoreDocumentCommandOfTimeSheet {
    document?: TimeSheet | undefined;

    constructor(data?: IStoreDocumentCommandOfTimeSheet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? TimeSheet.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): StoreDocumentCommandOfTimeSheet {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDocumentCommandOfTimeSheet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStoreDocumentCommandOfTimeSheet extends IRequest {
    document?: TimeSheet | undefined;
}

export class GetDocumentsResponseOfTimeSheet extends AppResponse implements IGetDocumentsResponseOfTimeSheet {
    documents?: TimeSheet[] | undefined;
    totalItemCount!: number;
    pageCount!: number;
    isFirstPage!: boolean;
    isLastPage!: boolean;
    hasNextPage!: boolean;
    hasPreviousPage!: boolean;
    firstItemOnPage!: number;
    lastItemOnPage!: number;

    constructor(data?: IGetDocumentsResponseOfTimeSheet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(TimeSheet.fromJS(item));
            }
            this.totalItemCount = _data["totalItemCount"];
            this.pageCount = _data["pageCount"];
            this.isFirstPage = _data["isFirstPage"];
            this.isLastPage = _data["isLastPage"];
            this.hasNextPage = _data["hasNextPage"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.firstItemOnPage = _data["firstItemOnPage"];
            this.lastItemOnPage = _data["lastItemOnPage"];
        }
    }

    static override fromJS(data: any): GetDocumentsResponseOfTimeSheet {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentsResponseOfTimeSheet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        data["totalItemCount"] = this.totalItemCount;
        data["pageCount"] = this.pageCount;
        data["isFirstPage"] = this.isFirstPage;
        data["isLastPage"] = this.isLastPage;
        data["hasNextPage"] = this.hasNextPage;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["firstItemOnPage"] = this.firstItemOnPage;
        data["lastItemOnPage"] = this.lastItemOnPage;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentsResponseOfTimeSheet extends IAppResponse {
    documents?: TimeSheet[] | undefined;
    totalItemCount: number;
    pageCount: number;
    isFirstPage: boolean;
    isLastPage: boolean;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    firstItemOnPage: number;
    lastItemOnPage: number;
}

export class GetDocumentResponseOfTimeSheet extends AppResponse implements IGetDocumentResponseOfTimeSheet {
    document?: TimeSheet | undefined;

    constructor(data?: IGetDocumentResponseOfTimeSheet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? TimeSheet.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): GetDocumentResponseOfTimeSheet {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentResponseOfTimeSheet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentResponseOfTimeSheet extends IAppResponse {
    document?: TimeSheet | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}