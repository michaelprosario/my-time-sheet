//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ContentClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    viewPost(link: string | null): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/content/post/{link}";
        if (link === undefined || link === null)
            throw new Error("The parameter 'link' must be defined.");
        url_ = url_.replace("{link}", encodeURIComponent("" + link));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processViewPost(_response);
        });
    }

    protected processViewPost(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }
}

export class DocumentsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    add(command: AddDocumentCommandOfDoc): Promise<NewRecordResponse> {
        let url_ = this.baseUrl + "/api/Documents/v1/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: Response): Promise<NewRecordResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NewRecordResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NewRecordResponse>(null as any);
    }

    edit(command: UpdateDocumentCommandOfDoc): Promise<AppResponse> {
        let url_ = this.baseUrl + "/api/Documents/v1/Edit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEdit(_response);
        });
    }

    protected processEdit(response: Response): Promise<AppResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AppResponse>(null as any);
    }

    store(command: StoreDocumentCommandOfDoc): Promise<StoreDocumentResponseOfDoc> {
        let url_ = this.baseUrl + "/api/Documents/v1/Store";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStore(_response);
        });
    }

    protected processStore(response: Response): Promise<StoreDocumentResponseOfDoc> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoreDocumentResponseOfDoc.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StoreDocumentResponseOfDoc>(null as any);
    }

    delete(command: DeleteDocumentCommand): Promise<AppResponse> {
        let url_ = this.baseUrl + "/api/Documents/v1/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<AppResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AppResponse>(null as any);
    }

    getPagedList(query: GetDocumentsQuery): Promise<GetDocumentsResponseOfDoc> {
        let url_ = this.baseUrl + "/api/Documents/v1/GetPagedList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPagedList(_response);
        });
    }

    protected processGetPagedList(response: Response): Promise<GetDocumentsResponseOfDoc> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentsResponseOfDoc.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentsResponseOfDoc>(null as any);
    }

    get(query: GetDocumentQuery): Promise<GetDocumentResponseOfDoc> {
        let url_ = this.baseUrl + "/api/Documents/v1/Get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<GetDocumentResponseOfDoc> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentResponseOfDoc.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentResponseOfDoc>(null as any);
    }
}

export class MediaFilesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    add(command: AddDocumentCommandOfMediaFile): Promise<NewRecordResponse> {
        let url_ = this.baseUrl + "/api/MediaFiles/v1/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: Response): Promise<NewRecordResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NewRecordResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NewRecordResponse>(null as any);
    }

    edit(command: UpdateDocumentCommandOfMediaFile): Promise<AppResponse> {
        let url_ = this.baseUrl + "/api/MediaFiles/v1/Edit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEdit(_response);
        });
    }

    protected processEdit(response: Response): Promise<AppResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AppResponse>(null as any);
    }

    store(command: StoreDocumentCommandOfMediaFile): Promise<StoreDocumentResponseOfMediaFile> {
        let url_ = this.baseUrl + "/api/MediaFiles/v1/Store";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStore(_response);
        });
    }

    protected processStore(response: Response): Promise<StoreDocumentResponseOfMediaFile> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoreDocumentResponseOfMediaFile.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StoreDocumentResponseOfMediaFile>(null as any);
    }

    delete(command: DeleteDocumentCommand): Promise<AppResponse> {
        let url_ = this.baseUrl + "/api/MediaFiles/v1/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<AppResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AppResponse>(null as any);
    }

    getPagedList(query: GetMediaFilesQuery): Promise<GetDocumentsResponseOfMediaFile> {
        let url_ = this.baseUrl + "/api/MediaFiles/v1/GetPagedList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPagedList(_response);
        });
    }

    protected processGetPagedList(response: Response): Promise<GetDocumentsResponseOfMediaFile> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentsResponseOfMediaFile.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentsResponseOfMediaFile>(null as any);
    }

    getMediaFile(query: GetMediaFileQuery): Promise<GetDocumentResponseOfMediaFile> {
        let url_ = this.baseUrl + "/api/MediaFiles/v1/GetMediaFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMediaFile(_response);
        });
    }

    protected processGetMediaFile(response: Response): Promise<GetDocumentResponseOfMediaFile> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentResponseOfMediaFile.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentResponseOfMediaFile>(null as any);
    }

    downloadFile(fileName: string | null): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/MediaFiles/v1/File/{fileName}";
        if (fileName === undefined || fileName === null)
            throw new Error("The parameter 'fileName' must be defined.");
        url_ = url_.replace("{fileName}", encodeURIComponent("" + fileName));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDownloadFile(_response);
        });
    }

    protected processDownloadFile(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }

    get(query: GetDocumentQuery): Promise<GetDocumentResponseOfMediaFile> {
        let url_ = this.baseUrl + "/api/MediaFiles/v1/Get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<GetDocumentResponseOfMediaFile> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentResponseOfMediaFile.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentResponseOfMediaFile>(null as any);
    }
}

export class PagesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    add(command: AddDocumentCommandOfPage): Promise<NewRecordResponse> {
        let url_ = this.baseUrl + "/api/Pages/v1/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: Response): Promise<NewRecordResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NewRecordResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NewRecordResponse>(null as any);
    }

    edit(command: UpdateDocumentCommandOfPage): Promise<AppResponse> {
        let url_ = this.baseUrl + "/api/Pages/v1/Edit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEdit(_response);
        });
    }

    protected processEdit(response: Response): Promise<AppResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AppResponse>(null as any);
    }

    store(command: StoreDocumentCommandOfPage): Promise<StoreDocumentResponseOfPage> {
        let url_ = this.baseUrl + "/api/Pages/v1/Store";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStore(_response);
        });
    }

    protected processStore(response: Response): Promise<StoreDocumentResponseOfPage> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoreDocumentResponseOfPage.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StoreDocumentResponseOfPage>(null as any);
    }

    delete(command: DeleteDocumentCommand): Promise<AppResponse> {
        let url_ = this.baseUrl + "/api/Pages/v1/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<AppResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AppResponse>(null as any);
    }

    getPagedList(query: GetDocumentsQuery): Promise<GetDocumentsResponseOfPage> {
        let url_ = this.baseUrl + "/api/Pages/v1/GetPagedList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPagedList(_response);
        });
    }

    protected processGetPagedList(response: Response): Promise<GetDocumentsResponseOfPage> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentsResponseOfPage.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentsResponseOfPage>(null as any);
    }

    get(query: GetDocumentQuery): Promise<GetDocumentResponseOfPage> {
        let url_ = this.baseUrl + "/api/Pages/v1/Get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<GetDocumentResponseOfPage> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentResponseOfPage.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentResponseOfPage>(null as any);
    }

    getPage(query: GetPostQuery): Promise<GetDocumentResponseOfPage> {
        let url_ = this.baseUrl + "/api/Pages/v1/GetPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: Response): Promise<GetDocumentResponseOfPage> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentResponseOfPage.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentResponseOfPage>(null as any);
    }
}

export class PostsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    add(command: AddDocumentCommandOfPost): Promise<NewRecordResponse> {
        let url_ = this.baseUrl + "/api/Posts/v1/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: Response): Promise<NewRecordResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NewRecordResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NewRecordResponse>(null as any);
    }

    edit(command: UpdateDocumentCommandOfPost): Promise<AppResponse> {
        let url_ = this.baseUrl + "/api/Posts/v1/Edit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEdit(_response);
        });
    }

    protected processEdit(response: Response): Promise<AppResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AppResponse>(null as any);
    }

    store(command: StoreDocumentCommandOfPost): Promise<StoreDocumentResponseOfPost> {
        let url_ = this.baseUrl + "/api/Posts/v1/Store";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStore(_response);
        });
    }

    protected processStore(response: Response): Promise<StoreDocumentResponseOfPost> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoreDocumentResponseOfPost.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StoreDocumentResponseOfPost>(null as any);
    }

    delete(command: DeleteDocumentCommand): Promise<AppResponse> {
        let url_ = this.baseUrl + "/api/Posts/v1/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<AppResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AppResponse>(null as any);
    }

    getPagedList(query: GetDocumentsQuery): Promise<GetDocumentsResponseOfPost> {
        let url_ = this.baseUrl + "/api/Posts/v1/GetPagedList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPagedList(_response);
        });
    }

    protected processGetPagedList(response: Response): Promise<GetDocumentsResponseOfPost> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentsResponseOfPost.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentsResponseOfPost>(null as any);
    }

    get(query: GetDocumentQuery): Promise<GetDocumentResponseOfPost> {
        let url_ = this.baseUrl + "/api/Posts/v1/Get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<GetDocumentResponseOfPost> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentResponseOfPost.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentResponseOfPost>(null as any);
    }

    getPost(query: GetPostQuery): Promise<GetDocumentResponseOfPost> {
        let url_ = this.baseUrl + "/api/Posts/v1/GetPost";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPost(_response);
        });
    }

    protected processGetPost(response: Response): Promise<GetDocumentResponseOfPost> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentResponseOfPost.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentResponseOfPost>(null as any);
    }
}

export class TimeSheetsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    storeDocument(command: StoreDocumentCommandOfTimeSheet): Promise<StoreDocumentResponseOfTimeSheet> {
        let url_ = this.baseUrl + "/api/TimeSheets/v1/Store";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStoreDocument(_response);
        });
    }

    protected processStoreDocument(response: Response): Promise<StoreDocumentResponseOfTimeSheet> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StoreDocumentResponseOfTimeSheet.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StoreDocumentResponseOfTimeSheet>(null as any);
    }

    getList(query: GetDocumentsQuery): Promise<GetDocumentsResponseOfTimeSheet> {
        let url_ = this.baseUrl + "/api/TimeSheets/v1/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: Response): Promise<GetDocumentsResponseOfTimeSheet> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentsResponseOfTimeSheet.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentsResponseOfTimeSheet>(null as any);
    }

    get(query: GetDocumentQuery): Promise<GetDocumentResponseOfTimeSheet> {
        let url_ = this.baseUrl + "/api/TimeSheets/v1/Get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<GetDocumentResponseOfTimeSheet> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDocumentResponseOfTimeSheet.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetDocumentResponseOfTimeSheet>(null as any);
    }

    delete(command: DeleteDocumentCommand): Promise<AppResponse> {
        let url_ = this.baseUrl + "/api/TimeSheets/v1/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<AppResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AppResponse>(null as any);
    }
}

export class UsersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    authenticate(userDto: UserDto): Promise<AuthenticateResponse> {
        let url_ = this.baseUrl + "/api/Users/v1/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userDto);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAuthenticate(_response);
        });
    }

    protected processAuthenticate(response: Response): Promise<AuthenticateResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticateResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthenticateResponse>(null as any);
    }

    registerUser(command: RegisterUserCommand): Promise<NewRecordResponse> {
        let url_ = this.baseUrl + "/api/Users/v1/RegisterUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegisterUser(_response);
        });
    }

    protected processRegisterUser(response: Response): Promise<NewRecordResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NewRecordResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NewRecordResponse>(null as any);
    }
}

export class AppResponse implements IAppResponse {
    code!: ResponseCode;
    message?: string | undefined;
    validationErrors?: ValidationFailure[] | undefined;
    additionalData?: any | undefined;

    constructor(data?: IAppResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors!.push(ValidationFailure.fromJS(item));
            }
            this.additionalData = _data["additionalData"];
        }
    }

    static fromJS(data: any): AppResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AppResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        data["additionalData"] = this.additionalData;
        return data;
    }
}

export interface IAppResponse {
    code: ResponseCode;
    message?: string | undefined;
    validationErrors?: ValidationFailure[] | undefined;
    additionalData?: any | undefined;
}

export class NewRecordResponse extends AppResponse implements INewRecordResponse {
    recordId?: string | undefined;

    constructor(data?: INewRecordResponse) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.recordId = _data["recordId"];
        }
    }

    static override fromJS(data: any): NewRecordResponse {
        data = typeof data === 'object' ? data : {};
        let result = new NewRecordResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recordId"] = this.recordId;
        super.toJSON(data);
        return data;
    }
}

export interface INewRecordResponse extends IAppResponse {
    recordId?: string | undefined;
}

export enum ResponseCode {
    Success = 200,
    BadRequest = 400,
    Unauthorized = 401,
    NotFound = 404,
    Error = 405,
}

export class ValidationFailure implements IValidationFailure {
    propertyName?: string | undefined;
    errorMessage?: string | undefined;
    attemptedValue?: any | undefined;
    customState?: any | undefined;
    severity!: Severity;
    errorCode?: string | undefined;
    formattedMessagePlaceholderValues?: { [key: string]: any; } | undefined;

    constructor(data?: IValidationFailure) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propertyName = _data["propertyName"];
            this.errorMessage = _data["errorMessage"];
            this.attemptedValue = _data["attemptedValue"];
            this.customState = _data["customState"];
            this.severity = _data["severity"];
            this.errorCode = _data["errorCode"];
            if (_data["formattedMessagePlaceholderValues"]) {
                this.formattedMessagePlaceholderValues = {} as any;
                for (let key in _data["formattedMessagePlaceholderValues"]) {
                    if (_data["formattedMessagePlaceholderValues"].hasOwnProperty(key))
                        (<any>this.formattedMessagePlaceholderValues)![key] = _data["formattedMessagePlaceholderValues"][key];
                }
            }
        }
    }

    static fromJS(data: any): ValidationFailure {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationFailure();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyName"] = this.propertyName;
        data["errorMessage"] = this.errorMessage;
        data["attemptedValue"] = this.attemptedValue;
        data["customState"] = this.customState;
        data["severity"] = this.severity;
        data["errorCode"] = this.errorCode;
        if (this.formattedMessagePlaceholderValues) {
            data["formattedMessagePlaceholderValues"] = {};
            for (let key in this.formattedMessagePlaceholderValues) {
                if (this.formattedMessagePlaceholderValues.hasOwnProperty(key))
                    (<any>data["formattedMessagePlaceholderValues"])[key] = (<any>this.formattedMessagePlaceholderValues)[key];
            }
        }
        return data;
    }
}

export interface IValidationFailure {
    propertyName?: string | undefined;
    errorMessage?: string | undefined;
    attemptedValue?: any | undefined;
    customState?: any | undefined;
    severity: Severity;
    errorCode?: string | undefined;
    formattedMessagePlaceholderValues?: { [key: string]: any; } | undefined;
}

export enum Severity {
    Error = 0,
    Warning = 1,
    Info = 2,
}

export class Request implements IRequest {
    userId?: string | undefined;

    constructor(data?: IRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): Request {
        data = typeof data === 'object' ? data : {};
        let result = new Request();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        return data;
    }
}

export interface IRequest {
    userId?: string | undefined;
}

export class AddDocumentCommandOfDoc extends Request implements IAddDocumentCommandOfDoc {
    document?: Doc | undefined;

    constructor(data?: IAddDocumentCommandOfDoc) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? Doc.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): AddDocumentCommandOfDoc {
        data = typeof data === 'object' ? data : {};
        let result = new AddDocumentCommandOfDoc();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IAddDocumentCommandOfDoc extends IRequest {
    document?: Doc | undefined;
}

export class Doc implements IDoc {
    collectionName?: string | undefined;
    jsonData?: string | undefined;
    name?: string | undefined;
    tags?: string | undefined;
    parentId?: string | undefined;
    children?: string[] | undefined;
    createdAt!: Date;
    createdBy?: string | undefined;
    deletedAt?: Date | undefined;
    deletedBy?: string | undefined;
    id?: string | undefined;
    isDeleted!: boolean;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;

    constructor(data?: IDoc) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.collectionName = _data["collectionName"];
            this.jsonData = _data["jsonData"];
            this.name = _data["name"];
            this.tags = _data["tags"];
            this.parentId = _data["parentId"];
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(item);
            }
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.deletedAt = _data["deletedAt"] ? new Date(_data["deletedAt"].toString()) : <any>undefined;
            this.deletedBy = _data["deletedBy"];
            this.id = _data["id"];
            this.isDeleted = _data["isDeleted"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
        }
    }

    static fromJS(data: any): Doc {
        data = typeof data === 'object' ? data : {};
        let result = new Doc();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["collectionName"] = this.collectionName;
        data["jsonData"] = this.jsonData;
        data["name"] = this.name;
        data["tags"] = this.tags;
        data["parentId"] = this.parentId;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item);
        }
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["deletedAt"] = this.deletedAt ? this.deletedAt.toISOString() : <any>undefined;
        data["deletedBy"] = this.deletedBy;
        data["id"] = this.id;
        data["isDeleted"] = this.isDeleted;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        return data;
    }
}

export interface IDoc {
    collectionName?: string | undefined;
    jsonData?: string | undefined;
    name?: string | undefined;
    tags?: string | undefined;
    parentId?: string | undefined;
    children?: string[] | undefined;
    createdAt: Date;
    createdBy?: string | undefined;
    deletedAt?: Date | undefined;
    deletedBy?: string | undefined;
    id?: string | undefined;
    isDeleted: boolean;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;
}

export class UpdateDocumentCommandOfDoc extends Request implements IUpdateDocumentCommandOfDoc {
    document?: Doc | undefined;

    constructor(data?: IUpdateDocumentCommandOfDoc) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? Doc.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): UpdateDocumentCommandOfDoc {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDocumentCommandOfDoc();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IUpdateDocumentCommandOfDoc extends IRequest {
    document?: Doc | undefined;
}

export class StoreDocumentResponseOfDoc extends AppResponse implements IStoreDocumentResponseOfDoc {
    document?: Doc | undefined;

    constructor(data?: IStoreDocumentResponseOfDoc) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? Doc.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): StoreDocumentResponseOfDoc {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDocumentResponseOfDoc();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStoreDocumentResponseOfDoc extends IAppResponse {
    document?: Doc | undefined;
}

export class StoreDocumentCommandOfDoc extends Request implements IStoreDocumentCommandOfDoc {
    document?: Doc | undefined;

    constructor(data?: IStoreDocumentCommandOfDoc) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? Doc.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): StoreDocumentCommandOfDoc {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDocumentCommandOfDoc();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStoreDocumentCommandOfDoc extends IRequest {
    document?: Doc | undefined;
}

export class DeleteDocumentCommand extends Request implements IDeleteDocumentCommand {
    id?: string | undefined;

    constructor(data?: IDeleteDocumentCommand) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static override fromJS(data: any): DeleteDocumentCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteDocumentCommand();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data;
    }
}

export interface IDeleteDocumentCommand extends IRequest {
    id?: string | undefined;
}

export class GetDocumentsResponseOfDoc extends AppResponse implements IGetDocumentsResponseOfDoc {
    documents?: Doc[] | undefined;
    totalItemCount!: number;
    pageCount!: number;
    isFirstPage!: boolean;
    isLastPage!: boolean;
    hasNextPage!: boolean;
    hasPreviousPage!: boolean;
    firstItemOnPage!: number;
    lastItemOnPage!: number;

    constructor(data?: IGetDocumentsResponseOfDoc) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(Doc.fromJS(item));
            }
            this.totalItemCount = _data["totalItemCount"];
            this.pageCount = _data["pageCount"];
            this.isFirstPage = _data["isFirstPage"];
            this.isLastPage = _data["isLastPage"];
            this.hasNextPage = _data["hasNextPage"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.firstItemOnPage = _data["firstItemOnPage"];
            this.lastItemOnPage = _data["lastItemOnPage"];
        }
    }

    static override fromJS(data: any): GetDocumentsResponseOfDoc {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentsResponseOfDoc();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        data["totalItemCount"] = this.totalItemCount;
        data["pageCount"] = this.pageCount;
        data["isFirstPage"] = this.isFirstPage;
        data["isLastPage"] = this.isLastPage;
        data["hasNextPage"] = this.hasNextPage;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["firstItemOnPage"] = this.firstItemOnPage;
        data["lastItemOnPage"] = this.lastItemOnPage;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentsResponseOfDoc extends IAppResponse {
    documents?: Doc[] | undefined;
    totalItemCount: number;
    pageCount: number;
    isFirstPage: boolean;
    isLastPage: boolean;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    firstItemOnPage: number;
    lastItemOnPage: number;
}

export class GetDocumentsQuery extends Request implements IGetDocumentsQuery {
    first!: number;
    rows!: number;
    page!: number;
    sortField?: string | undefined;
    sortOrder?: number | undefined;
    keyword?: string | undefined;
    tag?: string | undefined;

    constructor(data?: IGetDocumentsQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.first = _data["first"];
            this.rows = _data["rows"];
            this.page = _data["page"];
            this.sortField = _data["sortField"];
            this.sortOrder = _data["sortOrder"];
            this.keyword = _data["keyword"];
            this.tag = _data["tag"];
        }
    }

    static override fromJS(data: any): GetDocumentsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentsQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["first"] = this.first;
        data["rows"] = this.rows;
        data["page"] = this.page;
        data["sortField"] = this.sortField;
        data["sortOrder"] = this.sortOrder;
        data["keyword"] = this.keyword;
        data["tag"] = this.tag;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentsQuery extends IRequest {
    first: number;
    rows: number;
    page: number;
    sortField?: string | undefined;
    sortOrder?: number | undefined;
    keyword?: string | undefined;
    tag?: string | undefined;
}

export class GetDocumentResponseOfDoc extends AppResponse implements IGetDocumentResponseOfDoc {
    document?: Doc | undefined;

    constructor(data?: IGetDocumentResponseOfDoc) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? Doc.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): GetDocumentResponseOfDoc {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentResponseOfDoc();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentResponseOfDoc extends IAppResponse {
    document?: Doc | undefined;
}

export class GetDocumentQuery extends Request implements IGetDocumentQuery {
    id?: string | undefined;

    constructor(data?: IGetDocumentQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static override fromJS(data: any): GetDocumentQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentQuery extends IRequest {
    id?: string | undefined;
}

export class AddDocumentCommandOfMediaFile extends Request implements IAddDocumentCommandOfMediaFile {
    document?: MediaFile | undefined;

    constructor(data?: IAddDocumentCommandOfMediaFile) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? MediaFile.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): AddDocumentCommandOfMediaFile {
        data = typeof data === 'object' ? data : {};
        let result = new AddDocumentCommandOfMediaFile();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IAddDocumentCommandOfMediaFile extends IRequest {
    document?: MediaFile | undefined;
}

export class MediaFile implements IMediaFile {
    fileSize!: number;
    width!: number;
    height!: number;
    altText?: string | undefined;
    description?: string | undefined;
    fileName?: string | undefined;
    tags?: string | undefined;
    fileType?: string | undefined;
    title?: string | undefined;
    isDeleted!: boolean;
    createdAt!: Date;
    deletedAt?: Date | undefined;
    updatedAt?: Date | undefined;
    createdBy?: string | undefined;
    deletedBy?: string | undefined;
    id?: string | undefined;
    updatedBy?: string | undefined;

    constructor(data?: IMediaFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileSize = _data["fileSize"];
            this.width = _data["width"];
            this.height = _data["height"];
            this.altText = _data["altText"];
            this.description = _data["description"];
            this.fileName = _data["fileName"];
            this.tags = _data["tags"];
            this.fileType = _data["fileType"];
            this.title = _data["title"];
            this.isDeleted = _data["isDeleted"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.deletedAt = _data["deletedAt"] ? new Date(_data["deletedAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.deletedBy = _data["deletedBy"];
            this.id = _data["id"];
            this.updatedBy = _data["updatedBy"];
        }
    }

    static fromJS(data: any): MediaFile {
        data = typeof data === 'object' ? data : {};
        let result = new MediaFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileSize"] = this.fileSize;
        data["width"] = this.width;
        data["height"] = this.height;
        data["altText"] = this.altText;
        data["description"] = this.description;
        data["fileName"] = this.fileName;
        data["tags"] = this.tags;
        data["fileType"] = this.fileType;
        data["title"] = this.title;
        data["isDeleted"] = this.isDeleted;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["deletedAt"] = this.deletedAt ? this.deletedAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["deletedBy"] = this.deletedBy;
        data["id"] = this.id;
        data["updatedBy"] = this.updatedBy;
        return data;
    }
}

export interface IMediaFile {
    fileSize: number;
    width: number;
    height: number;
    altText?: string | undefined;
    description?: string | undefined;
    fileName?: string | undefined;
    tags?: string | undefined;
    fileType?: string | undefined;
    title?: string | undefined;
    isDeleted: boolean;
    createdAt: Date;
    deletedAt?: Date | undefined;
    updatedAt?: Date | undefined;
    createdBy?: string | undefined;
    deletedBy?: string | undefined;
    id?: string | undefined;
    updatedBy?: string | undefined;
}

export class UpdateDocumentCommandOfMediaFile extends Request implements IUpdateDocumentCommandOfMediaFile {
    document?: MediaFile | undefined;

    constructor(data?: IUpdateDocumentCommandOfMediaFile) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? MediaFile.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): UpdateDocumentCommandOfMediaFile {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDocumentCommandOfMediaFile();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IUpdateDocumentCommandOfMediaFile extends IRequest {
    document?: MediaFile | undefined;
}

export class StoreDocumentResponseOfMediaFile extends AppResponse implements IStoreDocumentResponseOfMediaFile {
    document?: MediaFile | undefined;

    constructor(data?: IStoreDocumentResponseOfMediaFile) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? MediaFile.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): StoreDocumentResponseOfMediaFile {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDocumentResponseOfMediaFile();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStoreDocumentResponseOfMediaFile extends IAppResponse {
    document?: MediaFile | undefined;
}

export class StoreDocumentCommandOfMediaFile extends Request implements IStoreDocumentCommandOfMediaFile {
    document?: MediaFile | undefined;

    constructor(data?: IStoreDocumentCommandOfMediaFile) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? MediaFile.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): StoreDocumentCommandOfMediaFile {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDocumentCommandOfMediaFile();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStoreDocumentCommandOfMediaFile extends IRequest {
    document?: MediaFile | undefined;
}

export class GetDocumentsResponseOfMediaFile extends AppResponse implements IGetDocumentsResponseOfMediaFile {
    documents?: MediaFile[] | undefined;
    totalItemCount!: number;
    pageCount!: number;
    isFirstPage!: boolean;
    isLastPage!: boolean;
    hasNextPage!: boolean;
    hasPreviousPage!: boolean;
    firstItemOnPage!: number;
    lastItemOnPage!: number;

    constructor(data?: IGetDocumentsResponseOfMediaFile) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(MediaFile.fromJS(item));
            }
            this.totalItemCount = _data["totalItemCount"];
            this.pageCount = _data["pageCount"];
            this.isFirstPage = _data["isFirstPage"];
            this.isLastPage = _data["isLastPage"];
            this.hasNextPage = _data["hasNextPage"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.firstItemOnPage = _data["firstItemOnPage"];
            this.lastItemOnPage = _data["lastItemOnPage"];
        }
    }

    static override fromJS(data: any): GetDocumentsResponseOfMediaFile {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentsResponseOfMediaFile();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        data["totalItemCount"] = this.totalItemCount;
        data["pageCount"] = this.pageCount;
        data["isFirstPage"] = this.isFirstPage;
        data["isLastPage"] = this.isLastPage;
        data["hasNextPage"] = this.hasNextPage;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["firstItemOnPage"] = this.firstItemOnPage;
        data["lastItemOnPage"] = this.lastItemOnPage;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentsResponseOfMediaFile extends IAppResponse {
    documents?: MediaFile[] | undefined;
    totalItemCount: number;
    pageCount: number;
    isFirstPage: boolean;
    isLastPage: boolean;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    firstItemOnPage: number;
    lastItemOnPage: number;
}

export class GetMediaFilesQuery extends Request implements IGetMediaFilesQuery {
    fileName?: string | undefined;
    fileType?: string | undefined;
    page!: number;
    rows!: number;

    constructor(data?: IGetMediaFilesQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fileName = _data["fileName"];
            this.fileType = _data["fileType"];
            this.page = _data["page"];
            this.rows = _data["rows"];
        }
    }

    static override fromJS(data: any): GetMediaFilesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetMediaFilesQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileType"] = this.fileType;
        data["page"] = this.page;
        data["rows"] = this.rows;
        super.toJSON(data);
        return data;
    }
}

export interface IGetMediaFilesQuery extends IRequest {
    fileName?: string | undefined;
    fileType?: string | undefined;
    page: number;
    rows: number;
}

export class GetDocumentResponseOfMediaFile extends AppResponse implements IGetDocumentResponseOfMediaFile {
    document?: MediaFile | undefined;

    constructor(data?: IGetDocumentResponseOfMediaFile) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? MediaFile.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): GetDocumentResponseOfMediaFile {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentResponseOfMediaFile();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentResponseOfMediaFile extends IAppResponse {
    document?: MediaFile | undefined;
}

export class GetMediaFileQuery extends Request implements IGetMediaFileQuery {
    fileName?: string | undefined;
    id?: string | undefined;

    constructor(data?: IGetMediaFileQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fileName = _data["fileName"];
            this.id = _data["id"];
        }
    }

    static override fromJS(data: any): GetMediaFileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetMediaFileQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["id"] = this.id;
        super.toJSON(data);
        return data;
    }
}

export interface IGetMediaFileQuery extends IRequest {
    fileName?: string | undefined;
    id?: string | undefined;
}

export class AddDocumentCommandOfPage extends Request implements IAddDocumentCommandOfPage {
    document?: Page | undefined;

    constructor(data?: IAddDocumentCommandOfPage) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? Page.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): AddDocumentCommandOfPage {
        data = typeof data === 'object' ? data : {};
        let result = new AddDocumentCommandOfPage();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IAddDocumentCommandOfPage extends IRequest {
    document?: Page | undefined;
}

export class Post implements IPost {
    name?: string | undefined;
    content?: string | undefined;
    htmlContent?: string | undefined;
    tags?: string | undefined;
    permaLink?: string | undefined;
    status?: string | undefined;
    createdAt!: Date;
    createdBy?: string | undefined;
    deletedAt?: Date | undefined;
    deletedBy?: string | undefined;
    id?: string | undefined;
    isDeleted!: boolean;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;
    abstract?: string | undefined;
    featuredImage?: string | undefined;

    constructor(data?: IPost) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.content = _data["content"];
            this.htmlContent = _data["htmlContent"];
            this.tags = _data["tags"];
            this.permaLink = _data["permaLink"];
            this.status = _data["status"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.deletedAt = _data["deletedAt"] ? new Date(_data["deletedAt"].toString()) : <any>undefined;
            this.deletedBy = _data["deletedBy"];
            this.id = _data["id"];
            this.isDeleted = _data["isDeleted"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.abstract = _data["abstract"];
            this.featuredImage = _data["featuredImage"];
        }
    }

    static fromJS(data: any): Post {
        data = typeof data === 'object' ? data : {};
        let result = new Post();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["content"] = this.content;
        data["htmlContent"] = this.htmlContent;
        data["tags"] = this.tags;
        data["permaLink"] = this.permaLink;
        data["status"] = this.status;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["deletedAt"] = this.deletedAt ? this.deletedAt.toISOString() : <any>undefined;
        data["deletedBy"] = this.deletedBy;
        data["id"] = this.id;
        data["isDeleted"] = this.isDeleted;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["abstract"] = this.abstract;
        data["featuredImage"] = this.featuredImage;
        return data;
    }
}

export interface IPost {
    name?: string | undefined;
    content?: string | undefined;
    htmlContent?: string | undefined;
    tags?: string | undefined;
    permaLink?: string | undefined;
    status?: string | undefined;
    createdAt: Date;
    createdBy?: string | undefined;
    deletedAt?: Date | undefined;
    deletedBy?: string | undefined;
    id?: string | undefined;
    isDeleted: boolean;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;
    abstract?: string | undefined;
    featuredImage?: string | undefined;
}

export class Page extends Post implements IPage {

    constructor(data?: IPage) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): Page {
        data = typeof data === 'object' ? data : {};
        let result = new Page();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IPage extends IPost {
}

export class UpdateDocumentCommandOfPage extends Request implements IUpdateDocumentCommandOfPage {
    document?: Page | undefined;

    constructor(data?: IUpdateDocumentCommandOfPage) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? Page.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): UpdateDocumentCommandOfPage {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDocumentCommandOfPage();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IUpdateDocumentCommandOfPage extends IRequest {
    document?: Page | undefined;
}

export class StoreDocumentResponseOfPage extends AppResponse implements IStoreDocumentResponseOfPage {
    document?: Page | undefined;

    constructor(data?: IStoreDocumentResponseOfPage) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? Page.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): StoreDocumentResponseOfPage {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDocumentResponseOfPage();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStoreDocumentResponseOfPage extends IAppResponse {
    document?: Page | undefined;
}

export class StoreDocumentCommandOfPage extends Request implements IStoreDocumentCommandOfPage {
    document?: Page | undefined;

    constructor(data?: IStoreDocumentCommandOfPage) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? Page.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): StoreDocumentCommandOfPage {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDocumentCommandOfPage();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStoreDocumentCommandOfPage extends IRequest {
    document?: Page | undefined;
}

export class GetDocumentsResponseOfPage extends AppResponse implements IGetDocumentsResponseOfPage {
    documents?: Page[] | undefined;
    totalItemCount!: number;
    pageCount!: number;
    isFirstPage!: boolean;
    isLastPage!: boolean;
    hasNextPage!: boolean;
    hasPreviousPage!: boolean;
    firstItemOnPage!: number;
    lastItemOnPage!: number;

    constructor(data?: IGetDocumentsResponseOfPage) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(Page.fromJS(item));
            }
            this.totalItemCount = _data["totalItemCount"];
            this.pageCount = _data["pageCount"];
            this.isFirstPage = _data["isFirstPage"];
            this.isLastPage = _data["isLastPage"];
            this.hasNextPage = _data["hasNextPage"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.firstItemOnPage = _data["firstItemOnPage"];
            this.lastItemOnPage = _data["lastItemOnPage"];
        }
    }

    static override fromJS(data: any): GetDocumentsResponseOfPage {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentsResponseOfPage();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        data["totalItemCount"] = this.totalItemCount;
        data["pageCount"] = this.pageCount;
        data["isFirstPage"] = this.isFirstPage;
        data["isLastPage"] = this.isLastPage;
        data["hasNextPage"] = this.hasNextPage;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["firstItemOnPage"] = this.firstItemOnPage;
        data["lastItemOnPage"] = this.lastItemOnPage;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentsResponseOfPage extends IAppResponse {
    documents?: Page[] | undefined;
    totalItemCount: number;
    pageCount: number;
    isFirstPage: boolean;
    isLastPage: boolean;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    firstItemOnPage: number;
    lastItemOnPage: number;
}

export class GetDocumentResponseOfPage extends AppResponse implements IGetDocumentResponseOfPage {
    document?: Page | undefined;

    constructor(data?: IGetDocumentResponseOfPage) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? Page.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): GetDocumentResponseOfPage {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentResponseOfPage();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentResponseOfPage extends IAppResponse {
    document?: Page | undefined;
}

export class GetPostQuery extends Request implements IGetPostQuery {
    permaLink?: string | undefined;

    constructor(data?: IGetPostQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.permaLink = _data["permaLink"];
        }
    }

    static override fromJS(data: any): GetPostQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetPostQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permaLink"] = this.permaLink;
        super.toJSON(data);
        return data;
    }
}

export interface IGetPostQuery extends IRequest {
    permaLink?: string | undefined;
}

export class AddDocumentCommandOfPost extends Request implements IAddDocumentCommandOfPost {
    document?: Post | undefined;

    constructor(data?: IAddDocumentCommandOfPost) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? Post.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): AddDocumentCommandOfPost {
        data = typeof data === 'object' ? data : {};
        let result = new AddDocumentCommandOfPost();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IAddDocumentCommandOfPost extends IRequest {
    document?: Post | undefined;
}

export class UpdateDocumentCommandOfPost extends Request implements IUpdateDocumentCommandOfPost {
    document?: Post | undefined;

    constructor(data?: IUpdateDocumentCommandOfPost) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? Post.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): UpdateDocumentCommandOfPost {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDocumentCommandOfPost();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IUpdateDocumentCommandOfPost extends IRequest {
    document?: Post | undefined;
}

export class StoreDocumentResponseOfPost extends AppResponse implements IStoreDocumentResponseOfPost {
    document?: Post | undefined;

    constructor(data?: IStoreDocumentResponseOfPost) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? Post.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): StoreDocumentResponseOfPost {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDocumentResponseOfPost();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStoreDocumentResponseOfPost extends IAppResponse {
    document?: Post | undefined;
}

export class StoreDocumentCommandOfPost extends Request implements IStoreDocumentCommandOfPost {
    document?: Post | undefined;

    constructor(data?: IStoreDocumentCommandOfPost) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? Post.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): StoreDocumentCommandOfPost {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDocumentCommandOfPost();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStoreDocumentCommandOfPost extends IRequest {
    document?: Post | undefined;
}

export class GetDocumentsResponseOfPost extends AppResponse implements IGetDocumentsResponseOfPost {
    documents?: Post[] | undefined;
    totalItemCount!: number;
    pageCount!: number;
    isFirstPage!: boolean;
    isLastPage!: boolean;
    hasNextPage!: boolean;
    hasPreviousPage!: boolean;
    firstItemOnPage!: number;
    lastItemOnPage!: number;

    constructor(data?: IGetDocumentsResponseOfPost) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(Post.fromJS(item));
            }
            this.totalItemCount = _data["totalItemCount"];
            this.pageCount = _data["pageCount"];
            this.isFirstPage = _data["isFirstPage"];
            this.isLastPage = _data["isLastPage"];
            this.hasNextPage = _data["hasNextPage"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.firstItemOnPage = _data["firstItemOnPage"];
            this.lastItemOnPage = _data["lastItemOnPage"];
        }
    }

    static override fromJS(data: any): GetDocumentsResponseOfPost {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentsResponseOfPost();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        data["totalItemCount"] = this.totalItemCount;
        data["pageCount"] = this.pageCount;
        data["isFirstPage"] = this.isFirstPage;
        data["isLastPage"] = this.isLastPage;
        data["hasNextPage"] = this.hasNextPage;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["firstItemOnPage"] = this.firstItemOnPage;
        data["lastItemOnPage"] = this.lastItemOnPage;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentsResponseOfPost extends IAppResponse {
    documents?: Post[] | undefined;
    totalItemCount: number;
    pageCount: number;
    isFirstPage: boolean;
    isLastPage: boolean;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    firstItemOnPage: number;
    lastItemOnPage: number;
}

export class GetDocumentResponseOfPost extends AppResponse implements IGetDocumentResponseOfPost {
    document?: Post | undefined;

    constructor(data?: IGetDocumentResponseOfPost) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? Post.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): GetDocumentResponseOfPost {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentResponseOfPost();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentResponseOfPost extends IAppResponse {
    document?: Post | undefined;
}

export class StoreDocumentResponseOfTimeSheet extends AppResponse implements IStoreDocumentResponseOfTimeSheet {
    document?: TimeSheet | undefined;

    constructor(data?: IStoreDocumentResponseOfTimeSheet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? TimeSheet.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): StoreDocumentResponseOfTimeSheet {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDocumentResponseOfTimeSheet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStoreDocumentResponseOfTimeSheet extends IAppResponse {
    document?: TimeSheet | undefined;
}

export abstract class BaseEntity implements IBaseEntity {
    createdAt!: Date;
    createdBy?: string | undefined;
    deletedAt?: Date | undefined;
    deletedBy?: string | undefined;
    id?: string | undefined;
    isDeleted!: boolean;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;

    constructor(data?: IBaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.deletedAt = _data["deletedAt"] ? new Date(_data["deletedAt"].toString()) : <any>undefined;
            this.deletedBy = _data["deletedBy"];
            this.id = _data["id"];
            this.isDeleted = _data["isDeleted"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
        }
    }

    static fromJS(data: any): BaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["deletedAt"] = this.deletedAt ? this.deletedAt.toISOString() : <any>undefined;
        data["deletedBy"] = this.deletedBy;
        data["id"] = this.id;
        data["isDeleted"] = this.isDeleted;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        return data;
    }
}

export interface IBaseEntity {
    createdAt: Date;
    createdBy?: string | undefined;
    deletedAt?: Date | undefined;
    deletedBy?: string | undefined;
    id?: string | undefined;
    isDeleted: boolean;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;
}

export class TimeSheet extends BaseEntity implements ITimeSheet {
    entries?: TimeEntry[] | undefined;
    notes?: string | undefined;
    weekEnding?: string | undefined;

    constructor(data?: ITimeSheet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["entries"])) {
                this.entries = [] as any;
                for (let item of _data["entries"])
                    this.entries!.push(TimeEntry.fromJS(item));
            }
            this.notes = _data["notes"];
            this.weekEnding = _data["weekEnding"];
        }
    }

    static override fromJS(data: any): TimeSheet {
        data = typeof data === 'object' ? data : {};
        let result = new TimeSheet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.entries)) {
            data["entries"] = [];
            for (let item of this.entries)
                data["entries"].push(item.toJSON());
        }
        data["notes"] = this.notes;
        data["weekEnding"] = this.weekEnding;
        super.toJSON(data);
        return data;
    }
}

export interface ITimeSheet extends IBaseEntity {
    entries?: TimeEntry[] | undefined;
    notes?: string | undefined;
    weekEnding?: string | undefined;
}

export class TimeEntry extends BaseEntity implements ITimeEntry {
    date?: string | undefined;
    endTime?: string | undefined;
    hours!: number;
    notes?: string | undefined;
    projectId?: string | undefined;
    startTime?: string | undefined;
    storyId?: string | undefined;

    constructor(data?: ITimeEntry) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.date = _data["date"];
            this.endTime = _data["endTime"];
            this.hours = _data["hours"];
            this.notes = _data["notes"];
            this.projectId = _data["projectId"];
            this.startTime = _data["startTime"];
            this.storyId = _data["storyId"];
        }
    }

    static override fromJS(data: any): TimeEntry {
        data = typeof data === 'object' ? data : {};
        let result = new TimeEntry();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["endTime"] = this.endTime;
        data["hours"] = this.hours;
        data["notes"] = this.notes;
        data["projectId"] = this.projectId;
        data["startTime"] = this.startTime;
        data["storyId"] = this.storyId;
        super.toJSON(data);
        return data;
    }
}

export interface ITimeEntry extends IBaseEntity {
    date?: string | undefined;
    endTime?: string | undefined;
    hours: number;
    notes?: string | undefined;
    projectId?: string | undefined;
    startTime?: string | undefined;
    storyId?: string | undefined;
}

export class StoreDocumentCommandOfTimeSheet extends Request implements IStoreDocumentCommandOfTimeSheet {
    document?: TimeSheet | undefined;

    constructor(data?: IStoreDocumentCommandOfTimeSheet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? TimeSheet.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): StoreDocumentCommandOfTimeSheet {
        data = typeof data === 'object' ? data : {};
        let result = new StoreDocumentCommandOfTimeSheet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IStoreDocumentCommandOfTimeSheet extends IRequest {
    document?: TimeSheet | undefined;
}

export class GetDocumentsResponseOfTimeSheet extends AppResponse implements IGetDocumentsResponseOfTimeSheet {
    documents?: TimeSheet[] | undefined;
    totalItemCount!: number;
    pageCount!: number;
    isFirstPage!: boolean;
    isLastPage!: boolean;
    hasNextPage!: boolean;
    hasPreviousPage!: boolean;
    firstItemOnPage!: number;
    lastItemOnPage!: number;

    constructor(data?: IGetDocumentsResponseOfTimeSheet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(TimeSheet.fromJS(item));
            }
            this.totalItemCount = _data["totalItemCount"];
            this.pageCount = _data["pageCount"];
            this.isFirstPage = _data["isFirstPage"];
            this.isLastPage = _data["isLastPage"];
            this.hasNextPage = _data["hasNextPage"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.firstItemOnPage = _data["firstItemOnPage"];
            this.lastItemOnPage = _data["lastItemOnPage"];
        }
    }

    static override fromJS(data: any): GetDocumentsResponseOfTimeSheet {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentsResponseOfTimeSheet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        data["totalItemCount"] = this.totalItemCount;
        data["pageCount"] = this.pageCount;
        data["isFirstPage"] = this.isFirstPage;
        data["isLastPage"] = this.isLastPage;
        data["hasNextPage"] = this.hasNextPage;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["firstItemOnPage"] = this.firstItemOnPage;
        data["lastItemOnPage"] = this.lastItemOnPage;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentsResponseOfTimeSheet extends IAppResponse {
    documents?: TimeSheet[] | undefined;
    totalItemCount: number;
    pageCount: number;
    isFirstPage: boolean;
    isLastPage: boolean;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    firstItemOnPage: number;
    lastItemOnPage: number;
}

export class GetDocumentResponseOfTimeSheet extends AppResponse implements IGetDocumentResponseOfTimeSheet {
    document?: TimeSheet | undefined;

    constructor(data?: IGetDocumentResponseOfTimeSheet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.document = _data["document"] ? TimeSheet.fromJS(_data["document"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): GetDocumentResponseOfTimeSheet {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentResponseOfTimeSheet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IGetDocumentResponseOfTimeSheet extends IAppResponse {
    document?: TimeSheet | undefined;
}

export class AuthenticateResponse extends AppResponse implements IAuthenticateResponse {
    userId?: string | undefined;
    username?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    token?: string | undefined;

    constructor(data?: IAuthenticateResponse) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userId = _data["userId"];
            this.username = _data["username"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.token = _data["token"];
        }
    }

    static override fromJS(data: any): AuthenticateResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["username"] = this.username;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["token"] = this.token;
        super.toJSON(data);
        return data;
    }
}

export interface IAuthenticateResponse extends IAppResponse {
    userId?: string | undefined;
    username?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    token?: string | undefined;
}

export class UserDto implements IUserDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface IUserDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
}

export class RegisterUserCommand implements IRegisterUserCommand {
    firstName?: string | undefined;
    lastName?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;

    constructor(data?: IRegisterUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterUserCommand {
    firstName?: string | undefined;
    lastName?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}